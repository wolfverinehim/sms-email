#!/usr/bin/env python3
"""
Script de verificaci√≥n antes de subir a GitHub
Verifica que no se suban archivos sensibles y que todo est√© listo
"""

import os
import glob
import sys

def verificar_gitignore():
    """Verifica que .gitignore est√© correctamente configurado"""
    print("üîç VERIFICANDO .GITIGNORE")
    print("=" * 50)
    
    if not os.path.exists('.gitignore'):
        print("‚ùå .gitignore no existe!")
        return False
    
    with open('.gitignore', 'r') as f:
        contenido = f.read()
    
    archivos_criticos = [
        'config.ini',
        'logs/',
        '.venv/',
        '*.log',
        '.env'
    ]
    
    for archivo in archivos_criticos:
        if archivo in contenido:
            print(f"‚úÖ {archivo} est√° excluido")
        else:
            print(f"‚ùå {archivo} NO est√° excluido")
            return False
    
    return True

def verificar_archivos_sensibles():
    """Verifica que no haya archivos sensibles que se puedan subir"""
    print("\nüîí VERIFICANDO ARCHIVOS SENSIBLES")
    print("=" * 50)
    
    archivos_prohibidos = [
        'config.ini',
        '.env'
    ]
    
    encontrados = []
    for archivo in archivos_prohibidos:
        if os.path.exists(archivo):
            encontrados.append(archivo)
    
    if encontrados:
        print("‚ö†Ô∏è  ARCHIVOS SENSIBLES ENCONTRADOS:")
        for archivo in encontrados:
            print(f"   üìÑ {archivo}")
        print("üí° Estos archivos est√°n en .gitignore y NO se subir√°n")
        return True
    else:
        print("‚úÖ No se encontraron archivos sensibles")
        return True

def verificar_estructura():
    """Verifica que la estructura del proyecto est√© completa"""
    print("\nüìÅ VERIFICANDO ESTRUCTURA DEL PROYECTO")
    print("=" * 50)
    
    archivos_requeridos = [
        'README.md',
        'requirements.txt',
        'LICENSE',
        '.gitignore',
        'envio_sms_email.py',
        'visor_logs.py',
        'config.ini.ejemplo'
    ]
    
    todos_presentes = True
    for archivo in archivos_requeridos:
        if os.path.exists(archivo):
            tama√±o = os.path.getsize(archivo) / 1024
            print(f"‚úÖ {archivo} ({tama√±o:.1f} KB)")
        else:
            print(f"‚ùå {archivo} - FALTA")
            todos_presentes = False
    
    return todos_presentes

def verificar_ejecutables():
    """Verifica los ejecutables"""
    print("\nüîß VERIFICANDO EJECUTABLES")
    print("=" * 50)
    
    if os.path.exists('dist'):
        ejecutables = glob.glob('dist/*.exe')
        if ejecutables:
            for exe in ejecutables:
                tama√±o = os.path.getsize(exe) / (1024 * 1024)
                print(f"‚úÖ {os.path.basename(exe)} ({tama√±o:.2f} MB)")
            return True
        else:
            print("‚ö†Ô∏è  No se encontraron ejecutables en dist/")
            print("üí° Ejecuta: python crear_ejecutable.py")
            return False
    else:
        print("‚ö†Ô∏è  Directorio dist/ no existe")
        print("üí° Ejecuta: python crear_ejecutable.py")
        return False

def verificar_documentacion():
    """Verifica la documentaci√≥n"""
    print("\nüìö VERIFICANDO DOCUMENTACI√ìN")
    print("=" * 50)
    
    docs_importantes = [
        'README.md',
        'DOCUMENTACION_LOGGING.md',
        'README_EJECUTABLE.md'
    ]
    
    for doc in docs_importantes:
        if os.path.exists(doc):
            with open(doc, 'r', encoding='utf-8') as f:
                contenido = f.read()
                lineas = len(contenido.splitlines())
                print(f"‚úÖ {doc} ({lineas} l√≠neas)")
        else:
            print(f"‚ùå {doc} - FALTA")

def generar_resumen_github():
    """Genera un resumen para GitHub"""
    print("\nüêô RESUMEN PARA GITHUB")
    print("=" * 50)
    
    # Contar archivos Python
    scripts_py = glob.glob('*.py')
    print(f"üìù Scripts Python: {len(scripts_py)}")
    
    # Contar ejecutables
    ejecutables = glob.glob('dist/*.exe') if os.path.exists('dist') else []
    print(f"üîß Ejecutables: {len(ejecutables)}")
    
    # Contar documentaci√≥n
    docs = glob.glob('*.md')
    print(f"üìö Documentaci√≥n: {len(docs)} archivos")
    
    # Tama√±o total (sin archivos excluidos)
    tama√±o_total = 0
    for root, dirs, files in os.walk('.'):
        # Excluir directorios ignorados
        dirs[:] = [d for d in dirs if d not in ['.venv', 'logs', '__pycache__', '.git']]
        
        for file in files:
            if not file.endswith(('.log', '.pyc')) and file != 'config.ini':
                file_path = os.path.join(root, file)
                try:
                    tama√±o_total += os.path.getsize(file_path)
                except:
                    pass
    
    print(f"üìä Tama√±o total del repositorio: {tama√±o_total / (1024*1024):.2f} MB")

def main():
    """Funci√≥n principal"""
    print("üîç VERIFICACI√ìN PRE-GITHUB - AjpdSoft SMS/Email")
    print("=" * 60)
    
    verificaciones = [
        verificar_gitignore(),
        verificar_archivos_sensibles(),
        verificar_estructura(),
        verificar_ejecutables(),
    ]
    
    verificar_documentacion()
    generar_resumen_github()
    
    print("\n" + "=" * 60)
    if all(verificaciones):
        print("‚úÖ ¬°PROYECTO LISTO PARA GITHUB!")
        print("üöÄ Ejecuta: subir_a_github.bat")
        print("\nüí° RECOMENDACIONES:")
        print("   1. Crea el repositorio en GitHub como 'ajpdsoft-sms-email'")
        print("   2. Hazlo p√∫blico para mayor visibilidad")
        print("   3. Agrega topics: python, sms, email, automation, gmail")
        print("   4. Considera crear una release con los ejecutables")
    else:
        print("‚ùå HAY PROBLEMAS QUE RESOLVER")
        print("üí° Corrige los errores mostrados arriba")
    
    print("\nüîí SEGURIDAD:")
    print("   ‚úÖ config.ini est√° excluido del repositorio")
    print("   ‚úÖ Contrase√±as se enmascaran en logs")
    print("   ‚úÖ Solo config.ini.ejemplo se sube (plantilla)")

if __name__ == "__main__":
    main()
