#!/usr/bin/env python3
"""
Validador de configuraci√≥n para IBA-Soft Env√≠o SMS/Email
Verifica que el archivo config.ini est√© bien configurado
"""

import os
import configparser
import smtplib

def validar_archivo_config():
    """Valida que existe el archivo de configuraci√≥n"""
    if not os.path.exists("config.ini"):
        print("‚ùå ERROR: No se encuentra config.ini")
        print("\nüîß SOLUCI√ìN:")
        print("1. Copia config.ini.ejemplo como config.ini")
        print("2. Edita config.ini con tus credenciales reales")
        return False
    
    print("‚úÖ Archivo config.ini encontrado")
    return True

def validar_estructura_config():
    """Valida la estructura del archivo de configuraci√≥n"""
    try:
        config = configparser.ConfigParser()
        config.read("config.ini", encoding='utf-8')
        
        # Verificar secciones requeridas
        secciones_requeridas = ['gmail', 'sms', 'sistema']
        for seccion in secciones_requeridas:
            if not config.has_section(seccion):
                print(f"‚ùå ERROR: Falta la secci√≥n [{seccion}] en config.ini")
                return False
        
        # Verificar campos de Gmail
        campos_gmail = ['usuario', 'password', 'host', 'puerto', 'ssl']
        for campo in campos_gmail:
            if not config.has_option('gmail', campo):
                print(f"‚ùå ERROR: Falta el campo '{campo}' en la secci√≥n [gmail]")
                return False
        
        print("‚úÖ Estructura de config.ini v√°lida")
        return True, config
        
    except Exception as e:
        print(f"‚ùå ERROR leyendo config.ini: {e}")
        return False

def validar_credenciales_gmail(config):
    """Valida que las credenciales de Gmail sean v√°lidas"""
    try:
        usuario = config.get('gmail', 'usuario')
        password = config.get('gmail', 'password')
        host = config.get('gmail', 'host')
        puerto = config.getint('gmail', 'puerto')
        
        # Verificar que no sean valores de ejemplo
        if usuario == 'tu_email@gmail.com':
            print("‚ùå ERROR: Debes cambiar 'tu_email@gmail.com' por tu email real")
            return False
        
        if 'tu_contrase√±a' in password:
            print("‚ùå ERROR: Debes cambiar la contrase√±a de ejemplo por tu contrase√±a de aplicaci√≥n")
            return False
        
        # Verificar formato de email
        if '@' not in usuario or '.' not in usuario:
            print(f"‚ùå ERROR: '{usuario}' no parece un email v√°lido")
            return False
        
        # Verificar longitud de contrase√±a de aplicaci√≥n (suelen ser 16 caracteres)
        if len(password.replace(' ', '')) != 16:
            print(f"‚ö†Ô∏è  ADVERTENCIA: La contrase√±a de aplicaci√≥n suele tener 16 caracteres")
            print(f"   Tu contrase√±a tiene {len(password.replace(' ', ''))} caracteres")
        
        print("‚úÖ Credenciales Gmail parecen v√°lidas")
        return True
        
    except Exception as e:
        print(f"‚ùå ERROR validando credenciales: {e}")
        return False

def probar_conexion_gmail(config):
    """Prueba la conexi√≥n real con Gmail"""
    try:
        print("\nüîÑ Probando conexi√≥n con Gmail...")
        
        usuario = config.get('gmail', 'usuario')
        password = config.get('gmail', 'password')
        host = config.get('gmail', 'host')
        puerto = config.getint('gmail', 'puerto')
        
        # Crear conexi√≥n SMTP
        servidor = smtplib.SMTP(host, puerto)
        servidor.starttls()
        servidor.login(usuario, password)
        servidor.quit()
        
        print("‚úÖ ¬°Conexi√≥n con Gmail EXITOSA!")
        return True
        
    except Exception as e:
        print(f"‚ùå ERROR de conexi√≥n Gmail: {e}")
        print("\nüí° POSIBLES SOLUCIONES:")
        print("1. Verifica que la contrase√±a sea una 'contrase√±a de aplicaci√≥n'")
        print("2. Aseg√∫rate de tener activada la verificaci√≥n en 2 pasos")
        print("3. Genera una nueva contrase√±a de aplicaci√≥n")
        return False

def validar_configuracion_sms(config):
    """Valida la configuraci√≥n SMS"""
    try:
        puerto = config.get('sms', 'puerto_default')
        baudrate = config.getint('sms', 'baudrate')
        timeout = config.getint('sms', 'timeout')
        
        print(f"‚úÖ Configuraci√≥n SMS: Puerto {puerto}, Baudrate {baudrate}, Timeout {timeout}s")
        return True
        
    except Exception as e:
        print(f"‚ùå ERROR en configuraci√≥n SMS: {e}")
        return False

def main():
    print("üîç VALIDADOR DE CONFIGURACI√ìN - IBA-Soft")
    print("=" * 60)
    
    # Paso 1: Verificar archivo
    if not validar_archivo_config():
        return
    
    # Paso 2: Verificar estructura
    resultado = validar_estructura_config()
    if isinstance(resultado, tuple):
        valido, config = resultado
        if not valido:
            return
    else:
        return
    
    # Paso 3: Validar credenciales
    if not validar_credenciales_gmail(config):
        return
    
    # Paso 4: Validar configuraci√≥n SMS
    validar_configuracion_sms(config)
    
    # Paso 5: Probar conexi√≥n (opcional)
    print(f"\n¬øQuieres probar la conexi√≥n con Gmail? (s/n): ", end="")
    respuesta = input().strip().lower()
    
    if respuesta in ['s', 'si', 's√≠', 'y', 'yes']:
        if probar_conexion_gmail(config):
            print(f"\nüéâ ¬°CONFIGURACI√ìN COMPLETAMENTE V√ÅLIDA!")
            print(f"‚úÖ Tu sistema est√° listo para enviar emails")
        else:
            print(f"\n‚ö†Ô∏è  Configuraci√≥n v√°lida pero hay problemas de conexi√≥n")
    else:
        print(f"\n‚úÖ Validaci√≥n de estructura completada")
    
    print(f"\nüìÑ Para usar el sistema:")
    print(f"   python envio_sms_email.py EMAIL destino@ejemplo.com \"Mensaje\" 587 {config.get('gmail', 'usuario')}")

if __name__ == "__main__":
    main()
